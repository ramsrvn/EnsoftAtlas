{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0      //nested loops\
\
var dskqopt = functions("dskqopt")\
show(dskqopt)\
var dskqoptCFG = cfg(dskqopt)\
show(dskqoptCFG)\
var dskqoptLoops = dskqoptCFG.nodes(XCSG.Loop)\
dskqoptLoops.eval.nodes.size\
show(dskqoptLoops)\
var nestedLoops = edges(XCSG.LoopChild).between(dskqoptLoops, dskqoptLoops).retainEdges\
 show(nestedLoops)\
\
\
      //color or change style of the graph elements\
\
var dskenq = functions("dskenq")\
var dskenqCFG = cfg(dskenq)\
show(dskenqCFG)\
var loopEntry = selected\
var loopExits = selected\
var m = new Markup\
m.setNode(loopEntry,MarkupProperty.NODE_BACKGROUND_COLOR, Color.YELLOW)\
m.setNode(loopExits,MarkupProperty.NODE_BACKGROUND_COLOR, Color.RED)\
show(dskenqCFG,m)\
\
\
var dskenq = functions("dskenq")\
show(dskenq)\
var dskenqCFG = cfg(dskenq)\
show(dskenqCFG)\
var dskenqControlFlowBackEdges = dskenqCFG.edges(XCSG.ControlFlowBackEdge).retainEdges\
show(dskenqControlFlowBackEdges)\
var conditionTrueEdges = dskenqCFG.selectEdge(XCSG.conditionValue,"true")\
var conditionFalseEdges = dskenqCFG.selectEdge(XCSG.conditionValue,"false")\
var m = new Markup\
m.setEdge(dskenqControlFlowBackEdges, MarkupProperty.EDGE_STYLE, MarkupProperty.LineStyle.DASHED)\
import java.awt.Color\
m.setEdge(conditionTrueEdges, MarkupProperty.EDGE_COLOR, Color.WHITE)\
m.setEdge(conditionFalseEdges, MarkupProperty.EDGE_STYLE, MarkupProperty.LineStyle.DOTTED)\
show(dskenqCFG,m)\
\
\
//Acyclic graph\
var acyclic_dskenqCFG = dskenqCFG.differenceEdges(dskenqControlFlowBackEdges)\
show(acyclic_dskenqCFG)}